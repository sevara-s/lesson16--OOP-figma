Map is a collection of keyed data items like a object.
Map holds key-value pairs. 

new Map -> creates the map.
map.set(key,value)->stores the value by the key.
map.get(key)->returns the value by the key,"undefined" if key doesn't exist in map.
map.has(key)->returns true if the key exists,false otherwise.
map.delete(key)->removes the value by the key.
map.clear()->removes everything form the map.
map.size ->returns the current element count


Set 
The set is also an object and keeps a value array.(without keys), where  each value may occur only once. The Set is well  optimized in peerformance to creat a unique arrays

new Set - creates the set, and if an iterable object iss provided.

set.add(value)->adds a value,returns the set itself.
set.delete(value)->removes the value , returns true if value existed at the moment of the call ,otherwise false.
set.has(value)->returs true if the value exists in the set,otherwise false.
set.clear()->removes everything from the set.
set.size ->returns the count of the elements.


Javascript engine keeps a value in memory while it is "reachable" and can potentially be used.

WeakMap does not support iteration and methods keys(),values(),entries(),so there's no way to get all keys or values from it.

weakMap.get(key)
weakMap.set(key,value)
weakMap.delete(key)
weakMap.has(key)


WeakSet behaves similary to WeakMap:

similar to set , but we can only add objects (not primitive types)
